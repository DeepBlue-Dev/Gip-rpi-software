@page "/"
@using Blazor_FrontEnd.Data;
@using System.Threading;
@using Blazor_FrontEnd.Data.RequestCodes;
@using NetMQ;
@using NetMQ.Sockets;
@inject IPCClient BackendComm
@implements IDisposable

<h1>Batterij monitoring</h1>

@if (!Connected)
{
      <p style="overflow-wrap:break-word">Heftruck is niet verbonden</p>

} else
{
	<p style="overflow-wrap:break-word">Heftruck is verbonden</p>
}


@code{
	private bool Connected = false;
	private string? response;
	private CancellationTokenSource tokenSource;

	protected async override Task OnInitializedAsync()
	{
		using(var client = new RequestSocket())
		{
			client.Connect("tcp://localhost:2100");
			client.SendFrame(new byte[] { Convert.ToByte(RequestCodes.GetOnlineStatus) });
			if(client.ReceiveFrameString() == bool.TrueString)
			{
				Connected = true;
			} else
			{
				Connected = false;
			}
		}
		await base.OnInitializedAsync();	
	}

	public void Dispose()
	{
		
		//tokenSource.Dispose();
	}

	
	
}